COMANDOS SQL NO SQL SERVER

1° criar base de dados (CREATE DATABASE nome_bd)

2° acessar base de dados (USE nome_bd)

3° criar tabela (CREATE TABLE nome_table(
			atributo1,
			atributo2,
			atributo3
		))

4° apagar tabela (DROP TABLE nome_tabela)

5° apagar banco de dados 	(USE master
				DROP DATABASE nome_db)

6° apagar dados de uma tabela	(DELETE FROM table_name WHERE condition;)

7° mudar dados da tabela	(UPDATE name_table
				SET colunaMudada = 'valor que será mudado'
				WHERE colunaCondicional = 'valor condicional';)

8° apresentar dados da tabela (SELECT [* ou nome_coluna(s)] FROM nome_tabela)

9° inserção de dados 	(INSERT INTO nome_tabela(
					atributo1,
					atributo2,
					atributo3
				) VALUES(
					dado1,
					dado2,
					dado3
				))

10° selecionar uma ou mais tabelas de acordo com parâmetros específicados(
	SELECT * FROM tabela_1 INNER JOIN tabela_2 ON tabela_1.coluna=tabela_1.coluna
OBS: retorna valor somente se houver ocorrência em ambas
)

11° dar um nome alternativo para a tabela(com o exemplo anterior)(aliases)(
	SELECT * FROM tabela_1 AS L INNER JOIN tabela_2 AS E ON L.coluna=E.coluna
)

12° INNER JOIN com + de 2 tabelas(

SELECT t_cliente.nm_cliente,nr_cpf, t_endereco.ds_endereco, t_telefone.nr_telefone
FROM t_cliente INNER JOIN t_endereco
	ON t_cliente.cd_cliente=t_endereco.t_cliente_cd_cliente
INNER JOIN t_telefone
	ON t_cliente.cd_cliente=t_telefone.t_cliente_cd_cliente
)

13º - criar uma chave estrangeira:
ALTER TABLE tabela_recebedora
    ADD CONSTRAINT nm_da_FK FOREIGN KEY ( col_reservada_fk )
        REFERENCES tabela_base ( pk_base );

14º - adicionar uma coluna em uma tabela já feita:
ALTER TABLE NOME_TABLE 
ADD nm_column DATETYPE CONSTRAINT;

15º - adicionar uma constraint a uma tabela:
ALTER TABLE NOME_TABLE
ADD CONSTRAINT nome_contraint
CHECK ( operação lógica );

16º - alterar type ou tamanho:
ALTER TABLE NOME_TABLE 
MODIFY column_modificada NOVO_TIPO_DADO NOT NULL;

17º - excluir coluna:
ALTER TABLE NOME_TABLE 
DROP COLUMN nm_column;

18º - excluir restrição:
- ALTER TABLE NOME_TABLE
	DROP CONSTRAINT nm_constraint CASCADE;

- ALTER TABLE NOME_TABLE
	DROP CONSTRAINT nm_constraint;

19º - alterar nome tabela:
ALTER TABLE     T_ANTIGA
RENAME TO T_NOVA;

20º - renomear coluna:
ALTER TABLE T_TABELA
RENAME COLUMN nm_antigo TO nm_novo;

21º - alterar nome constraint:
ALTER TABLE T_TABELA
RENAME CONSTRAINT CONSTRAINT_ANTIGA
TO CONSTRAINT_NOVA;

22º - visualizar constraints existentes:
-- VISUALIZAR CONSTRAINTS DE TODAS AS TABELAS QUE
-- TENHA ACESSO
SELECT TABLE_NAME, CONSTRAINT_NAME,
       CONSTRAINT_TYPE, SEARCH_CONDITION
  FROM ALL_CONSTRAINTS;
  
 -- DE UMA ESPECIFICA:
 -- VISUALIZAR CONSTRAINTS DE UMA TABELA ESPECÍFICA
SELECT TABLE_NAME, CONSTRAINT_NAME,
       CONSTRAINT_TYPE, SEARCH_CONDITION
  FROM ALL_CONSTRAINTS
 WHERE UPPER(TABLE_NAME)= 'T_SIP_FUNCIONARIO';
 
 23º - excluir tabelas com e sem constraint:
- DROP TABLE tabela;
- DROP TABLE tabela CASCADE CONSTRAINTS;

24º - gerar sequencias numericas:
CREATE SEQUENCE nome_sequencia
[ START WITH num_inicio ] -- numero inicial
[ INCREMENT BY  num_incremento ] -- valor que sera incrementado
[ { MAXVALUE  num_maximo | NOMAXVALUE } ] -- valor maximo
[ { MINVALUE  num_minimo | NOMINVALUE } ] -- valor minimo
[ { CYCLE | NOCYCLE} ] -- CYCLE: quando o valor maximo é atingido, ele retorna ao minimo e vice-versa
[ { CACHE   num_cache | NOCACHE } ] -- numero de valores que serao mantidos na sequencia
[ { ORDER | NOORDER } ]; --garante que os valores gerados estão em ordem

-- SELECT:
-- select first X -> apresentar os primeiros resultados do select de acordo com o valor determinado em "X"
-- select distinct -> apresentar somente dados que não são replicados
-- select skip X -> apresentar resultado de seleção pulando as primeiras ocorrencias de acordo com o valor determinado em "X"
-- ORDER BY -> apresentar informações em ordem, seja numérica ou alfanumérica
-- select current_timestamp from RDB$DATABASE; -> retorna data e hora do banco
-- select campo1 || campo2 as nome_juncao from tabela -> concatenar informações da tabela;
-- select count(*) AS TOTAL from tabela; -> quantas ocorrencias tem na tabela
-- select max(campo1) as MAXIMO from tabela; -> maior número;
-- INNER JOIN -> tentará cruzar os dados das tabelas de modo que, havendo correspondência, o resultado do select seja apresentado;
-- OUTER JOIN:
--       left -> retorna todas as linhas do stream esquerdo 
--       right -> retorna todas as linhas do stream direito

-- OPERADORES, PREDICADOS E PRECEDÊNCIAS:
--    maior prioridade (maior ao menor):
         -- concatenação = ||;
         -- aritmético:
            -- ();
            -- *
            -- /
            -- +
            -- -
         -- comparação:
            -- =, <, >, >=, <=, != etc...
            -- in
            -- starting with 'value'
            -- like -> '%a' = palavras que terminam com A | 'a%' = palavras que começam com A | 'a_t%' = palavras que tem o primeiro e terceiro caractere igual a A e T, respec.

         -- lógico: AND, OR, NOT

-- Null é comparado com uma condição específica -> "IS NULL" ou "IS NOT NULL":
   -- SELECT CASE WHEN (1 IS NOT NULL) then 'verdade' else 'falso' end FROM rdb$database;

-- CHARSET -> tipos de caracteres que podem ser utilizados por uma determinada database, tabela ou campo.

-- GENERATORS E SEQUENCES:
   -- basicamente representam a mesma idéia, porém os generators representam uma nomenclatura específica do Firebird.
   -- set term !! ;
   -- CREATE TRIGGER TESTE_SEQ_AUTO FOR TESTE_SEQ
   -- ACTIVE BEFORE INSERT POSITION 0
   -- AS
   -- BEGIN
   -- if (new.ID is null) then
   -- NEW.ID = gen_id(vll,1);
   -- END!!
   -- set term ; !!

-- VIEW
   -- são telas geradas a partir da junção e leitura de determinadas tabelas:
   --    VIEW nome_view(campo1,campo2,campoN) as 
   -- select dado1,dado2,dadoN from tabela;
